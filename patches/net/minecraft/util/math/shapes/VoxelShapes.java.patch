--- a/net/minecraft/util/math/shapes/VoxelShapes.java
+++ b/net/minecraft/util/math/shapes/VoxelShapes.java
@@ -1,5 +1,6 @@
 package net.minecraft.util.math.shapes;
 
+import carpet.settings.CarpetSettings;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.math.DoubleMath;
 import com.google.common.math.IntMath;
@@ -8,6 +9,8 @@
 import java.util.Iterator;
 import java.util.Objects;
 import java.util.stream.Stream;
+
+import me.jellysquid.mods.lithium.shapes.pairs.LithiumDoublePairList;
 import net.minecraft.util.AxisRotation;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.Util;
@@ -18,12 +21,31 @@
 public final class VoxelShapes
 {
     private static final VoxelShape EMPTY = new VoxelShapeArray(new VoxelShapePartBitSet(0, 0, 0), (DoubleList)(new DoubleArrayList(new double[] {0.0D})), (DoubleList)(new DoubleArrayList(new double[] {0.0D})), (DoubleList)(new DoubleArrayList(new double[] {0.0D})));
-    private static final VoxelShape FULL_CUBE = Util.make(() ->
+    
+    // [CM] Changed FULL_CUBE from a final variable to a normal variable so it is switchable
+    // to completely turn off the tweak
+    public static final VoxelShape FULL_CUBE_OLD = Util.make(() ->
     {
         VoxelShapePart voxelshapepart = new VoxelShapePartBitSet(1, 1, 1);
         voxelshapepart.setFilled(0, 0, 0, true, true);
         return new VoxelShapeCube(voxelshapepart);
     });
+    public static final VoxelShape FULL_CUBE_NEW = new ocd.mcoptimizations.voxel.VoxelShapeAABB(new AxisAlignedBB(0., 0., 0., 1., 1., 1.)) {
+        @Override
+        protected DoubleList getValues(final EnumFacing.Axis axis)
+        {
+            return new DoubleRangeList(1);
+        }
+        
+        @Override
+        public VoxelShape persistent()
+        {
+            return this;
+        }
+    };
+    
+    public static VoxelShape FULL_CUBE = FULL_CUBE_OLD;
+    // [CM] end
 
     public static VoxelShape empty()
     {
@@ -81,7 +103,9 @@
         }
         else
         {
-            return new VoxelShapeArray(FULL_CUBE.part, new double[] {aabb.minX, aabb.maxX}, new double[] {aabb.minY, aabb.maxY}, new double[] {aabb.minZ, aabb.maxZ});
+            return !CarpetSettings.optimizeVoxelCode ?
+                    new VoxelShapeArray(FULL_CUBE.part, new double[] {aabb.minX, aabb.maxX}, new double[] {aabb.minY, aabb.maxY}, new double[] {aabb.minZ, aabb.maxZ}) :
+                    new ocd.mcoptimizations.voxel.VoxelShapeAABB.Cached(aabb);
         }
     }
 
@@ -276,6 +300,10 @@
         }
     }
 
+    /**
+     * Lithium optimized
+     * Replaces the returned list pair with our own optimized type.
+     */
     @VisibleForTesting
     protected static IDoubleListMerger makeListMerger(int p_199410_0_, DoubleList list1, DoubleList list2, boolean p_199410_3_, boolean p_199410_4_)
     {
@@ -312,7 +340,8 @@
         }
         else
         {
-            return new IndirectMerger(list1, list2, p_199410_3_, p_199410_4_);
+            // return new IndirectMerger(list1, list2, p_199410_3_, p_199410_4_);
+            return new LithiumDoublePairList(list1, list2, p_199410_3_, p_199410_4_);
         }
     }
 
