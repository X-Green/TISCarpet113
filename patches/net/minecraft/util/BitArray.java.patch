--- a/net/minecraft/util/BitArray.java
+++ b/net/minecraft/util/BitArray.java
@@ -1,6 +1,7 @@
 package net.minecraft.util;
 
 import net.minecraft.util.math.MathHelper;
+import net.minecraft.world.chunk.IBlockStatePalette;
 import org.apache.commons.lang3.Validate;
 
 public class BitArray
@@ -9,6 +10,7 @@
     private final int bitsPerEntry;
     private final long maxEntryValue;
     private final int arraySize;
+    private final int field_24079;
 
     public BitArray(int bitsPerEntryIn, int arraySizeIn)
     {
@@ -28,6 +30,9 @@
         {
             throw new RuntimeException("Invalid length given for storage, got: " + p_i47901_3_.length + " but expected: " + i);
         }
+
+        // High version / Lithium
+        this.field_24079 = (char)(64 / p_i47901_1_);
     }
 
     public void setAt(int index, int value)
@@ -81,4 +86,41 @@
     {
         return this.bitsPerEntry;
     }
+
+    public <T> void compact(IBlockStatePalette<T> srcPalette, IBlockStatePalette<T> dstPalette, short[] out) {
+        if (this.arraySize >= Short.MAX_VALUE) {
+            throw new IllegalStateException("Array too large");
+        }
+
+        if (this.arraySize != out.length) {
+            throw new IllegalStateException("Array size mismatch");
+        }
+
+        short[] mappings = new short[(int) (this.maxEntryValue + 1)];
+
+        int idx = 0;
+
+        for (long word : this.longArray) {
+            long bits = word;
+
+            for (int elementIdx = 0; elementIdx < this.field_24079; ++elementIdx) {
+                int value = (int) (bits & this.maxEntryValue);
+                int remappedId = mappings[value];
+
+                if (remappedId == 0) {
+                    remappedId = dstPalette.idFor(srcPalette.get(value)) + 1;
+                    mappings[value] = (short) remappedId;
+                }
+
+                out[idx] = (short) (remappedId - 1);
+                bits >>= this.bitsPerEntry;
+
+                ++idx;
+
+                if (idx >= this.arraySize) {
+                    return;
+                }
+            }
+        }
+    }
 }
