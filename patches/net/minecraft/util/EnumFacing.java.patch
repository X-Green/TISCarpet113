--- a/net/minecraft/util/EnumFacing.java
+++ b/net/minecraft/util/EnumFacing.java
@@ -1,5 +1,7 @@
 package net.minecraft.util;
 
+import carpet.helpers.BlockRotator;
+import carpet.settings.CarpetSettings;
 import com.google.common.collect.Iterators;
 import java.util.Arrays;
 import java.util.Comparator;
@@ -32,7 +34,7 @@
     private final EnumFacing.Axis axis;
     private final EnumFacing.AxisDirection axisDirection;
     private final Vec3i directionVec;
-    private static final EnumFacing[] VALUES = values();
+    public static final EnumFacing[] VALUES = values();
     private static final Map<String, EnumFacing> NAME_LOOKUP = Arrays.stream(VALUES).collect(Collectors.toMap(EnumFacing::getName2, (p_199787_0_) -> {
         return p_199787_0_;
     }));
@@ -63,7 +65,17 @@
     public static EnumFacing[] getFacingDirections(Entity entityIn)
     {
         float f = entityIn.getPitch(1.0F) * ((float)Math.PI / 180F);
-        float f1 = -entityIn.getYaw(1.0F) * ((float)Math.PI / 180F);
+        // [CM] start useMainYaw fix
+        float f1;
+        if (!CarpetSettings.placementRotationFix)
+        {
+            f1 = -entityIn.getYaw(1.0F) * ((float)Math.PI / 180F);
+        }
+        else
+        {
+            f1 = -entityIn.getMainYaw(1.0F) * ((float)Math.PI / 180F);
+        }
+        // [CM] end
         float f2 = MathHelper.sin(f);
         float f3 = MathHelper.cos(f);
         float f4 = MathHelper.sin(f1);
@@ -76,6 +88,11 @@
         float f8 = flag2 ? f5 : -f5;
         float f9 = f6 * f3;
         float f10 = f8 * f3;
+        // [CM] use rotate
+        if (BlockRotator.flippinEligibility(entityIn))
+        {
+            flag = !flag; flag1 = !flag1; flag2 = !flag2;
+        }
         EnumFacing enumfacing = flag ? EAST : WEST;
         EnumFacing enumfacing1 = flag1 ? UP : DOWN;
         EnumFacing enumfacing2 = flag2 ? SOUTH : NORTH;
@@ -121,9 +138,14 @@
         return this.axisDirection;
     }
 
+    /**
+     * @reason Avoid the modulo/abs operations
+     * @author JellySquid
+     */
     public EnumFacing getOpposite()
     {
-        return byIndex(this.opposite);
+        // return byIndex(this.opposite);
+        return VALUES[this.opposite];
     }
 
     @OnlyIn(Dist.CLIENT)
@@ -299,9 +321,14 @@
         return (float)((this.horizontalIndex & 3) * 90);
     }
 
+    /**
+     * @reason Do not allocate an excessive number of Direction arrays
+     * @author JellySquid
+     */
     public static EnumFacing random(Random rand)
     {
-        return values()[rand.nextInt(values().length)];
+        // return values()[rand.nextInt(values().length)];
+        return VALUES[rand.nextInt(VALUES.length)];
     }
 
     public static EnumFacing getFacingFromVector(double x, double y, double z)
@@ -510,4 +537,10 @@
             return Iterators.forArray(this.facingValues);
         }
     }
+    
+    // [TISCM] Newlight - get directionVec for server
+    public Vec3i getDirectionVecTIS()
+    {
+        return this.directionVec;
+    }
 }
