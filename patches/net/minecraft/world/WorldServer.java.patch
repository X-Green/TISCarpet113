--- a/net/minecraft/world/WorldServer.java
+++ b/net/minecraft/world/WorldServer.java
@@ -1,5 +1,9 @@
 package net.minecraft.world;
 
+import carpet.helpers.TickSpeed;
+import carpet.settings.CarpetSettings;
+import carpet.utils.CarpetProfiler;
+import carpet.logging.logHelpers.TileTickListLogHelper;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.util.concurrent.ListenableFuture;
@@ -110,6 +114,8 @@
     ObjectLinkedOpenHashSet<BlockEventData> blockEventQueue = new ObjectLinkedOpenHashSet<>();
     private boolean insideTick;
 
+    private final BlockPos.MutableBlockPos randomPosInChunkCachedPos = new BlockPos.MutableBlockPos();
+
     public WorldServer(MinecraftServer server, ISaveHandler p_i49819_2_, WorldSavedDataStorage p_i49819_3_, WorldInfo p_i49819_4_, DimensionType p_i49819_5_, Profiler p_i49819_6_)
     {
         super(p_i49819_2_, p_i49819_3_, p_i49819_4_, p_i49819_5_.create(), p_i49819_6_, false);
@@ -191,13 +197,24 @@
             this.wakeAllPlayers();
         }
 
+        //CM profiler
+        int did = this.dimension.getType().getId();
+        String world_name = (did==0)?"Overworld":((did<0?"The Nether":"The End"));
+        // CM end
+
+        if (TickSpeed.process_entities)
+        { // [CM] extra indent to skip processing of entities
         this.profiler.startSection("spawner");
+        CarpetProfiler.start_section(world_name, "Spawning");
 
         if (this.getGameRules().getBoolean("doMobSpawning") && this.worldInfo.getGenerator() != WorldType.DEBUG_ALL_BLOCK_STATES)
         {
             this.entitySpawner.findChunksForSpawning(this, this.spawnHostileMobs, this.spawnPeacefulMobs, this.worldInfo.getGameTime() % 400L == 0L);
             this.getChunkProvider().spawnMobs(this, this.spawnHostileMobs, this.spawnPeacefulMobs);
         }
+        CarpetProfiler.end_current_section();
+        }
+        // [CM] end extra indent
 
         this.profiler.endStartSection("chunkSource");
         this.chunkProvider.tick(hasTimeLeft);
@@ -208,24 +225,42 @@
             this.setSkylightSubtracted(j);
         }
 
+        if (TickSpeed.process_entities)
+        { // CM extra indent to skip processing of entities
         this.worldInfo.setGameTime(this.worldInfo.getGameTime() + 1L);
-
         if (this.getGameRules().getBoolean("doDaylightCycle"))
         {
             this.worldInfo.setDayTime(this.worldInfo.getDayTime() + 1L);
         }
 
         this.profiler.endStartSection("tickPending");
+        CarpetProfiler.start_section(world_name, "Blocks");
         this.tickPending();
+        CarpetProfiler.end_current_section();
+        } // end extra indent
         this.profiler.endStartSection("tickBlocks");
+        CarpetProfiler.start_section(world_name, "Blocks");
         this.tickBlocks();
+        CarpetProfiler.end_current_section();
         this.profiler.endStartSection("chunkMap");
         this.playerChunkMap.tick();
+
+        if (TickSpeed.process_entities)
+        { // CM extra indent to skip processing of entities
         this.profiler.endStartSection("village");
+        CarpetProfiler.start_section(world_name, "Villages");
         this.villageCollection.tick();
         this.villageSiege.tick();
+        CarpetProfiler.end_current_section();
         this.profiler.endStartSection("portalForcer");
         this.worldTeleporter.tick(this.getGameTime());
+        }
+        // [TISCM] Newlight
+        if (CarpetSettings.newLight)
+        {
+            this.profiler.endStartSection("lighting");
+            this.getLightingEngine().procLightUpdates();
+        }
         this.profiler.endSection();
         this.sendQueuedBlockEvents();
         this.insideTick = false;
@@ -270,7 +305,7 @@
                 }
             }
 
-            this.allPlayersSleeping = j > 0 && j >= this.playerEntities.size() - i;
+            this.allPlayersSleeping = j > 0 && (CarpetSettings.onePlayerSleeping || j >= this.playerEntities.size() - i);
         }
     }
 
@@ -306,6 +341,13 @@
     {
         if (this.allPlayersSleeping && !this.isRemote)
         {
+            if (CarpetSettings.onePlayerSleeping)
+            {
+                for (EntityPlayer entityplayer : this.playerEntities)
+                    if (!entityplayer.isSpectator() && entityplayer.isPlayerFullyAsleep())
+                        return true;
+                return false;
+            }
             for (EntityPlayer entityplayer : this.playerEntities)
             {
                 if (!entityplayer.isSpectator() && !entityplayer.isPlayerFullyAsleep())
@@ -407,6 +449,13 @@
                 chunk.enqueueRelightChecks();
                 this.profiler.endStartSection("tickChunk");
                 chunk.tick(false);
+                //[CM] tick freeze
+                if (!TickSpeed.process_entities)
+                { // skipping the rest of the block processing
+                    this.profiler.endSection();
+                    continue;
+                }
+
                 this.profiler.endStartSection("thunder");
 
                 if (flag && flag1 && this.rand.nextInt(100000) == 0)
@@ -499,7 +548,7 @@
         }
     }
 
-    protected BlockPos adjustPosToNearbyEntity(BlockPos pos)
+    public BlockPos adjustPosToNearbyEntity(BlockPos pos) // [CM] Changed access to public for summonNaturalLightning
     {
         BlockPos blockpos = this.getHeight(Heightmap.Type.MOTION_BLOCKING, pos);
         AxisAlignedBB axisalignedbb = (new AxisAlignedBB(blockpos, new BlockPos(blockpos.getX(), this.getHeight(), blockpos.getZ()))).grow(3.0D);
@@ -608,7 +657,14 @@
     {
         if (this.worldInfo.getGenerator() != WorldType.DEBUG_ALL_BLOCK_STATES)
         {
+            // TISCM TileTick logger
+            TileTickListLogHelper.setListInfo("Block", this.getDimension().getType().getId());
+            // end TISCM TileTick logger
             this.pendingBlockTicks.tick();
+
+            // TISCM TileTick logger
+            TileTickListLogHelper.setListInfo("Fluid", this.getDimension().getType().getId());
+            // end TISCM TileTick logger
             this.pendingFluidTicks.tick();
         }
     }
@@ -1032,7 +1088,7 @@
 
             if (this.fireBlockEvent(blockeventdata))
             {
-                this.server.getPlayerList().sendToAllNearExcept((EntityPlayer)null, (double)blockeventdata.getPosition().getX(), (double)blockeventdata.getPosition().getY(), (double)blockeventdata.getPosition().getZ(), 64.0D, this.dimension.getType(), new SPacketBlockAction(blockeventdata.getPosition(), blockeventdata.getBlock(), blockeventdata.getEventID(), blockeventdata.getEventParameter()));
+                this.server.getPlayerList().sendToAllNearExcept((EntityPlayer)null, (double)blockeventdata.getPosition().getX(), (double)blockeventdata.getPosition().getY(), (double)blockeventdata.getPosition().getZ(), CarpetSettings.blockEventPacketRange, this.dimension.getType(), new SPacketBlockAction(blockeventdata.getPosition(), blockeventdata.getBlock(), blockeventdata.getEventID(), blockeventdata.getEventParameter()));
             }
         }
     }
